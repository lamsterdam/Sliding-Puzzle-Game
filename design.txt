This is a program that mimics a puzzle slider game.

I used an Object Oriented approach and have two files, one for the game board class and another for the tile placement class. The game board class handles the foundation of the game and initilizes the turtle screen, handles the sizing, and draws the rectangles and game buttons. The tile placement class handles creating the tile pieces, registers mouse clicks, swaps and determines the win/loss. Both classes are imported into my puzzle game file which has the main that runs the game.

When the game starts, the splash screen is displayed and two dialog boxes pop up to get the users name and number of chances they want. The first puzzle is loaded and by default this is mario. I created the puzzles by reading in from the puzzle file, creating a list of lists of the contents and then creating a dictionary of images. Using the dictionary I create a list of turtles based on the number of puzzle pieces and then shuffle the turtles which then displays a shuffled puzzle. To handle the clicks, I first check which rectangle the click occurred in and based on this area I have a function that either calls for the button functions or swap functions. I then check if the clicked tile is next to a blank in both the x and y axis and then complete a swap and increase my moves counter. After each move, I try to check if each tile is in the correct position using a for loop that loops through a list of ordered numbers and matches it to the index of a turtle in the turtlelist. If they match, it increases the counter by one for each turtle until I get to a counter that is equal to last index in the list of numbers which represents the number of puzzle pieces. This would mean all pieces are in the correct x and y position. If they won I write their names to leaderboard file and show gif. If the number of moves is greater than chances show lose gif and end game. I used try-except block to handle non- existent puzzle files and files that did not have 16, 9 or 4 puzzle tiles. 

The sources I used were the assets, resources and images packet that Professor K provided us with.

Some tradeoffs I had to make were for loading new puzzle files, I cleared my turtlelist of images and also the tile list for the puz file and was able to empty these lists and then add in the new ones, but could not figure out how to physically remove the images from the puzzle area only without resetting the entire board in time. So I drew a white box over the old puzzle to "erase" the old one. Another tradeoff was my original idea was to have three classes, one for the game board, another for the tiles and the third for the game play. I had a hard time having my game play class access the attributes in the other two classes, so to keep moving I ended up making tile placement a longer class which handles tiles and game play. 
NB: The counter for winners did not fully work as planned but included it so that you can see my approach.

Some shoutouts: At the very beginning of the process I met with Justin a few times as I knew I wanted to use classes for the practice but didn't have a clear idea on how to use them with turtle. He helped me start to conceptualize the project and just organize my thoughts on it. I had a lot of questions on it and he matched my initial level of understanding which helped me to slowly increase my understanding of it. He also helped me get "un-stuck" at the tile swapping stage as I was stuck on this area for days. I had used goto() for the swapping but didn't explicitly give the clicked tile and the blank tile an x and y so once the clicked tile moved, the adjacent ended up following it to the same spot. Once I fixed this they started swapping finally. 
Also I met with Louis towards the middle part of the process, which was also during my stuck in tile swap stage, and he helped me figure out what was happening with it. At first I thought it wasn't doing anything at all, but his idea to have the images go to some other location so that I could see the behaviour better helped me realize that they were moving but they were following each other so it appeared that they were not moving. 
Also I met with Yi during the shuffle and getting clicks stage as I was also stuck here. I was trying to use onscreen click but got hung up because it only took one function and I had one for the button and another for the tiles so could not pass both. My idea was to have a click decision function that would choose which of the previous two functions to call but I had a hard time determining how to make it choose. She helped me with the idea of using the the different areas of the game board and making a decision based on which rectangle the click occurred in.   
